<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN" 
  "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">

<svg width="100%" height="100%" onload="init(evt)"
     xmlns="http://www.w3.org/2000/svg">

  <script type="text/ecmascript"> 
    <![CDATA[
     var basePointX       = 250.;
     var basePointY       = 230.;
     var slantAngle       = 40.;
     var zSlantX          = 0.;
     var zSlantY          = 0.;
     var cosAngle         = Math.cos(slantAngle*Math.PI/180);
     var sinAngle         = Math.sin(slantAngle*Math.PI/180);
     var strokeWidth      = 4.;
     var style            = "stroke:red;stroke-width:4";
     var theStyle         = "fill:red;stroke:white;stroke-width:1";
     var defaultStyle     = "fill:red;stroke:white;stroke-width:1";
     var dashStyles       = ['4 4 4 4',
                             '4 4 4 4',
                             '4 4 4 4'];
     var dashCount        = 3.;
     var strokeColors     = ['red','green',
                             'blue','magenta','pink'];
     var colorCount       = 5.;
     var axisCount        = 3.;
     var posAxesLengths   = [220,300,220]; //z,x,y
     var negAxesLengths   = [250,250,150]; //z,x,y
     var angle            = 0.;
     var angle2           = 0.;
     var theAngle         = 0.;
     var theAngle2        = 0.;
     var zValue           = 0.;
     var xValue           = 0.;
     var yValue           = 0.;
     var radius           = 0.;
     var radius2          = 0.;
     var deltaRadius      = 10.;
     var minRadius        = 0; 
     var maxRadius        = posAxesLengths[2]-50; 
     var factor           = 0.;
     var startTheta       = 0;
     var endTheta         = 360;
     var theta            = startTheta;
     var deltaTheta       = 5;
     var amplitudeY       = posAxesLengths[2]-30; 
     var frequency        = 1.0;
     var vertexCount      = 4.;
     var polygonXPts      = Array(vertexCount);
     var polygonYPts      = Array(vertexCount);
     var rVal             = 0.;
     var gVal             = 0.;
     var bVal             = 0.;
     var innerIndex       = 0.;
     var outerIndex       = 0.;
     var outerCount       = 0.;
     var innerCount       = 0.;

     var pGonNode         = null;
     var lineNode         = null;
     var ellipseNode      = null;
     var polygonNode      = null;
     var polygonNodeList  = Array(maxRadius);
     var svgDocument      = null;
     var gcNode           = null;
     var svgNS            = "http://www.w3.org/2000/svg";
              
     function init(event)
     {
      //svgDocument = event.target.getOwnerDocument(); 
        svgDocument = document;
        gcNode = svgDocument.getElementById("gc");

        draw3DAxes();
        initializeNodes();

        draw3DSurface(defaultStyle);

        // communication between HTML and SVG
        parent.updateStyle = updateStyle;
     }

     function updateStyle(theStrokeWidth, theStrokeColor,
                         theDashStyle, theRadialGradient) 
     {
        if( theRadialGradient == "none" )
        { 
           draw3DSurface(defaultStyle);
        } 
        else
        {
           theStyle  = "fill:url(#"+theRadialGradient+")";
           theStyle += ";stroke:"+theStrokeColor;
           theStyle += ";stroke-dasharray:"+theDashStyle;
           theStyle += ";stroke-width:"+theStrokeWidth;
           draw3DSurface(theStyle);
        } 
     } 

     function initializeNodes()
     {
        for(var v=0; v<endTheta; v++)
        {
           polygonNodeList[v] = Array(endTheta);
        }

        outerIndex = 0;
        innerIndex = 0;

        for(var y=minRadius; y<maxRadius; y+=deltaRadius)
        {
           radius  = maxRadius-y;
           radius2 = maxRadius-(y+deltaRadius);

           factor  = (y-minRadius)/(maxRadius-minRadius);
           factor2 = (y+deltaRadius-minRadius)/(maxRadius-minRadius);

           innerIndex = 0;
           for(theta=startTheta; theta<endTheta; theta+=deltaTheta)
           {
              angle  = (theta-startTheta)*Math.PI/180; 
              angle2 = (theta-startTheta+deltaTheta)*Math.PI/180; 
   
              // calculate coordinates of vertices...
              xValue = radius*Math.cos(angle);
              zValue = radius*Math.sin(angle);

              theAngle = y/maxRadius*90*Math.PI/180;
              yValue = -amplitudeY*Math.sin(theAngle);
   
              polygonXPts[0] = xValue-zValue*sinAngle;
              polygonYPts[0] = yValue+zValue*cosAngle;

              xValue = radius*Math.cos(angle2);
              zValue = radius*Math.sin(angle2);

              theAngle = y/maxRadius*90*Math.PI/180;
              yValue = -amplitudeY*Math.sin(theAngle);

              polygonXPts[1] = xValue-zValue*sinAngle;
              polygonYPts[1] = yValue+zValue*cosAngle;

              xValue = (radius-deltaRadius)*Math.cos(angle2);
              zValue = (radius-deltaRadius)*Math.sin(angle2);

              theAngle = (y+deltaRadius)/maxRadius*90*Math.PI/180;
              yValue = -amplitudeY*Math.sin(theAngle);

              polygonXPts[2] = xValue-zValue*sinAngle;
              polygonYPts[2] = yValue+zValue*cosAngle;

              xValue = (radius-deltaRadius)*Math.cos(angle);
              zValue = (radius-deltaRadius)*Math.sin(angle);

              theAngle = (y+deltaRadius)/maxRadius*90*Math.PI/180;
              yValue = -amplitudeY*Math.sin(theAngle);

              polygonXPts[3] = xValue-zValue*sinAngle;
              polygonYPts[3] = yValue+zValue*cosAngle;

              points = "M";
              for(var v=0; v<vertexCount; v++)
              {
                 points += (basePointX+polygonXPts[v])+","+
                           (basePointY+polygonYPts[v])+" ";
              }

              rVal = (theta-startTheta)*255/(endTheta-startTheta);
              bVal = radius*255/maxRadius;

              style = "fill:red"+
                      ";stroke:white;stroke-width:1";
   
              polygonNode = svgDocument.createElementNS(svgNS, "path");
              polygonNode.setAttribute("style",style);
              polygonNode.setAttribute("d", points);

              gcNode.appendChild(polygonNode);
              polygonNodeList[outerIndex][innerIndex++] = polygonNode;

              innerCount = innerIndex;
           }

           ++outerIndex;
        }

        outerCount = outerIndex;
     }

     function draw3DAxes()
     {
        // left outward (positive) z-axis 
        zSlantX = posAxesLengths[0]*Math.sin(
                           slantAngle*Math.PI/180);

        zSlantY = posAxesLengths[0]*Math.cos(
                           slantAngle*Math.PI/180);

      //var newRect = document.createElementNS(svgNS,"rect");
        lineNode = svgDocument.createElementNS(svgNS, "line");
  
        style  = "stroke:"+strokeColors[0];
        style += ";stroke-width:"+strokeWidth;

        lineNode.setAttribute("style", style);
        lineNode.setAttribute("x1", basePointX);
        lineNode.setAttribute("y1", basePointY);
        lineNode.setAttribute("x2", basePointX-zSlantX);
        lineNode.setAttribute("y2", basePointY+zSlantY);
 
        gcNode.appendChild(lineNode);

        // right receding (negative) z-axis 
        zSlantX = negAxesLengths[0]*Math.sin(
                           slantAngle*Math.PI/180);

        zSlantY = negAxesLengths[0]*Math.cos(
                           slantAngle*Math.PI/180);

        lineNode = svgDocument.createElementNS(svgNS, "line");
  
        style  = "stroke:"+strokeColors[0];
        style += ";stroke-width:"+strokeWidth;
        style += ";stroke-dasharray:"+dashStyles[0];

        lineNode.setAttribute("style", style);
        lineNode.setAttribute("x1", basePointX);
        lineNode.setAttribute("y1", basePointY);
        lineNode.setAttribute("x2", basePointX+zSlantX);
        lineNode.setAttribute("y2", basePointY-zSlantY);
 
        gcNode.appendChild(lineNode);

        // upper vertical y-axis 
        lineNode = svgDocument.createElementNS(svgNS, "line");
  
        style  = "stroke:"+strokeColors[2];
        style += ";stroke-width:"+strokeWidth;

        lineNode.setAttribute("style", style);
        lineNode.setAttribute("x1", basePointX);
        lineNode.setAttribute("y1", basePointY);
        lineNode.setAttribute("x2", basePointX);
        lineNode.setAttribute("y2", basePointY-
                                    posAxesLengths[2]);
 
        gcNode.appendChild(lineNode);

        // lower vertical y-axis 
        lineNode = svgDocument.createElementNS(svgNS, "line");
  
        style  = "stroke:"+strokeColors[2];
        style += ";stroke-width:"+strokeWidth;
        style += ";stroke-dasharray:"+dashStyles[1];

        lineNode.setAttribute("style", style);
        lineNode.setAttribute("x1", basePointX);
        lineNode.setAttribute("y1", basePointY);
        lineNode.setAttribute("x2", basePointX);
        lineNode.setAttribute("y2", basePointY+
                                    negAxesLengths[2]);
 
        gcNode.appendChild(lineNode);

        // right horizontal x-axis 
        lineNode = svgDocument.createElementNS(svgNS, "line");
  
        style  = "stroke:"+strokeColors[1];
        style += ";stroke-width:"+strokeWidth;

        lineNode.setAttribute("style", style);
        lineNode.setAttribute("x1", basePointX);
        lineNode.setAttribute("y1", basePointY);
        lineNode.setAttribute("x2", basePointX+
                                    posAxesLengths[1]);
        lineNode.setAttribute("y2", basePointY)
 
        gcNode.appendChild(lineNode);

        // left horizontal x-axis 
        lineNode = svgDocument.createElementNS(svgNS, "line");
  
        style  = "stroke:"+strokeColors[1];
        style += ";stroke-width:"+strokeWidth;
        style += ";stroke-dasharray:"+dashStyles[2];

        lineNode.setAttribute("style", style);
        lineNode.setAttribute("x1", basePointX);
        lineNode.setAttribute("y1", basePointY);
        lineNode.setAttribute("x2", basePointX-
                                    negAxesLengths[1]);
        lineNode.setAttribute("y2", basePointY)
 
        gcNode.appendChild(lineNode);
     }

     function draw3DSurface(theStyle)
     {
        for(var outer=0; outer<outerCount; outer++)
        {
           for(var inner=0; inner<innerCount; inner++)
           {
              polygonNode = polygonNodeList[outer][inner];

              if( (outer+inner) % 2 == 0 )
              {
                 if( theStyle == "none" )
                 {
                    polygonNode.setAttribute("style",defaultStyle);
                 }
                 else
                 {
                    polygonNode.setAttribute("style",theStyle);
                 }
              }
           }
        }
     }

  ]]> </script>

<!-- ============================ -->
<defs>
<!-- radial gradients -->
    <radialGradient id="4RG2" 
                    gradientUnits="userSpaceOnUse"
                    cx="400" cy="200" r="300" 
                    fx="400" fy="200">
      <stop offset="0%"   stop-color="red"/>
      <stop offset="33%"  stop-color="blue"/>
      <stop offset="67%"  stop-color="red"/>
      <stop offset="100%" stop-color="blue"/>
    </radialGradient>

    <radialGradient id="4RG6" 
                    gradientUnits="userSpaceOnUse"
                    cx="400" cy="200" r="300" 
                    fx="400" fy="200">
      <stop offset="0"    stop-color="white"/>
      <stop offset=".149" stop-color="red"/>
      <stop offset=".15"  stop-color="blue"/>
      <stop offset="1"    stop-color="black"/>
    </radialGradient>

   <radialGradient id="6RG6" 
                   gradientUnits="userSpaceOnUse"
                   cx="400" cy="200" r="300" 
                   fx="400" fy="200">
     <stop offset="0"    stop-color="white"/>
     <stop offset=".149" stop-color="red"/>
     <stop offset=".15"  stop-color="blue"/>
     <stop offset=".849" stop-color="red"/>
     <stop offset=".85"  stop-color="blue"/>
     <stop offset="1"    stop-color="black"/>
   </radialGradient>

   <radialGradient id="Frosted" 
                   gradientUnits="objectBoundingBox"
                   fx="30%" fy="30%">
     <stop offset="0%"   style="stop-color:#660000"/>
     <stop offset="40%"  style="stop-color:#AA0000"/>
     <stop offset="100%" style="stop-color:#FFFFFF"/>
   </radialGradient>

  <pattern id="checker1" 
           width="10" height="10"
           patternUnits="userSpaceOnUse">
     <rect fill="red"
           x="0" y="0" width="5" height="5"/> 
     <rect fill="blue"
           x="5" y="0" width="5" height="5"/> 
     <rect fill="blue"
           x="0" y="5" width="5" height="5"/> 
     <rect fill="red"
           x="5" y="5" width="5" height="5"/> 
  </pattern>
</defs>

<g id="gc" transform="translate(20,0)">
</g>
</svg>
